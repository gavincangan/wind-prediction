#!/usr/bin/env python
import pdb
import rospy
from sensor_msgs.msg import PointCloud2, Imu, Image
from std_msgs.msg import String

CONST_IMU = 1
CONST_ZED = 2

f_received_imu = False
f_received_zed = False
z_msgcount_imu = 0
z_msgcount_zed = 0

imu_data_list = []

def store_imu_data(data):
    global imu_data_list
    imu_data_list.append([data.header.seq, data.header.stamp.secs, data.header.stamp.nsecs, data.orientation.x, data.orientation.y, data.orientation.z, data.orientation.w, data.orientation_covariance, data.angular_velocity.x, data.angular_velocity.y, data.angular_velocity.z, data.angular_velocity_covariance, data.linear_acceleration.x, data.linear_acceleration.y, data.linear_acceleration.z, data.linear_acceleration_covariance ] )

def write_pcl_data(data):
    global imu_data_list
    fp = open(str(data.header.stamp.secs) + '.' + str(data.header.stamp.nsecs), 'w')
    fp.write('imu_data\n')
    # print 'Writing imu_data...'
    fp.write(''.join(str(e)+'\n' for e in imu_data_list))
    imu_data_list[:] = [] #.clear()
    fp.write('\npointcloud_data\n')

    pcl_data = [data.header.seq, data.header.stamp.secs, data.header.stamp.nsecs, data.height, data.width, ''.join(str(ord(data_lev1)) + ', ' for data_lev1 in data.data)]

    # print 'Writing pointcloud_data...'
    # for data_lev1 in data.data:
    #     if( not isinstance( data_lev1, (list, tuple) ) ):
    #         pcl_data = [data.header.seq, data.header.stamp.secs, data.header.stamp.nsecs, data.height, data.width, ''.join(str(ord(data_lev1))+', ')]
    #     else:
    #         data_lev2 = ''.join(str(data_lev_this) for data_lev_this in data_lev2)
    #         pcl_data = [data.header.seq, data.header.stamp.secs, data.header.stamp.nsecs, data.height, data.width, ''.join(str(ord(data_lev2))+', ')]

    # for data_items in data.data:
    #     print ord(data_items)
    #     break
    fp.write(str(pcl_data))
    fp.close()

def write_depth_data(data):
    global imu_data_list
    fp = open(str(data.header.stamp.secs) + '.' + str(data.header.stamp.nsecs), 'w')
    fp.write('imu_data\n')
    # print 'Writing imu_data...'
    fp.write(''.join(str(e)+'\n' for e in imu_data_list))
    imu_data_list[:] = [] #.clear()
    fp.write('\ndepth_data\n')

    depth_data = [data.header.seq, data.header.stamp.secs, data.header.stamp.nsecs, data.height, data.width, ''.join(str(ord(data_lev1)) + ', ' for data_lev1 in data.data)]

    # print 'Writing pointcloud_data...'
    # for data_lev1 in data.data:
    #     if( not isinstance( data_lev1, (list, tuple) ) ):
    #         pcl_data = [data.header.seq, data.header.stamp.secs, data.header.stamp.nsecs, data.height, data.width, ''.join(str(ord(data_lev1))+', ')]
    #     else:
    #         data_lev2 = ''.join(str(data_lev_this) for data_lev_this in data_lev2)
    #         pcl_data = [data.header.seq, data.header.stamp.secs, data.header.stamp.nsecs, data.height, data.width, ''.join(str(ord(data_lev2))+', ')]

    # for data_items in data.data:
    #     print ord(data_items)
    #     break
    fp.write(str(depth_data))
    fp.close()

def data_sync(msg_const, msg_count, data):
    # global f_received_imu
    # global f_received_zed
    global z_msgcount_imu
    global z_msgcount_zed

    # print 'Header:'
    # print data.header
    # print 'Data:'
    # print data

    # if msg_const == CONST_IMU:
    #     print 'Z', z_msgcount_zed, 'I', z_msgcount_imu
    # if msg_const == CONST_IMU:
    #     print '\nIMU | ZED =', z_msgcount_zed, ' IMU =', z_msgcount_imu
    # elif msg_const == CONST_ZED:
    #     print '\nZED | ZED =', z_msgcount_zed, ' IMU =', z_msgcount_imu
    # else:
    #     print '\ndefault'

def callback_imu(data):
    # global f_received_imu
    # global f_received_zed
    global z_msgcount_imu
    # print 'IMU rcvd'
    # f_received_imu = True
    # f_received_zed = False

    z_msgcount_imu += 1
    # data_sync(CONST_IMU, z_msgcount_imu, data)
    store_imu_data(data)
    # print(data)


def callback_pcl(data):
    # global f_received_zed
    # global f_received_imu
    global z_msgcount_zed
    # print 'PCL recvd'
    # f_received_imu = False
    # f_received_zed = True

    z_msgcount_zed += 1
    # data_sync(CONST_ZED, z_msgcount_zed, data)
    write_pcl_data(data)

    # print(data)

def callback_depth(data):
    # global f_received_zed
    # global f_received_imu
    global z_msgcount_zed
    # print 'PCL recvd'
    # f_received_imu = False
    # f_received_zed = True

    z_msgcount_zed += 1
    # data_sync(CONST_ZED, z_msgcount_zed, data)
    write_depth_data(data)

    # print(data)


def callback_gavin(data):
    print('Received test topic Gavin')
    # print(data)


def logger():
    rospy.init_node('logger')
    # pcl_topic = "/point_cloud/cloud_registered"
    imu_topic = "/mavros/imu/data"
    depth_topic = "/depth/depth_registered"
    gavin_topic = "/gavin"
    # /mavros/setpoint_velocity/cmd_vel
    # /mavros/manual_control/control
    # rospy.Subscriber(pcl_topic, PointCloud2, callback_pcl)
    rospy.Subscriber(depth_topic, Image, callback_depth)
    rospy.Subscriber(imu_topic, Imu, callback_imu)
    rospy.Subscriber(gavin_topic, String, callback_gavin)
    rospy.spin()


if __name__ == '__main__':
    f_received_imu = False
    f_received_zed = False
    logger()
